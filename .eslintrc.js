module.exports = {
    root: true,
    env: {
        es2022: true,
        node: true,
    },
    plugins: [
        'prettier',
        '@typescript-eslint',
        'simple-import-sort',
        'unused-imports',
        'import',
        'editorconfig',
    ],
    extends: [
        'plugin:@typescript-eslint/recommended',
        'plugin:@typescript-eslint/recommended-requiring-type-checking',
        'plugin:import/errors',
        'plugin:import/warnings',
        'plugin:import/typescript',
        'prettier',
    ],
    parser: '@typescript-eslint/parser',
    parserOptions: {
        tsconfigRootDir: __dirname,
        project: [
            './tsconfig.json',
            './tests/tsconfig.json',
        ],
    },
    rules: {
        'import/no-unresolved': ['off'],
        'import/prefer-default-export': ['off'],
        'prefer-destructuring': ['off'],
        'max-classes-per-file': ['error', 1],
        'lines-between-class-members': ['off'],
        '@typescript-eslint/ban-types': ['error'],
        '@typescript-eslint/quotes': ['error', 'single', { avoidEscape: true }],
        '@typescript-eslint/no-floating-promises': ['error'],
        '@typescript-eslint/no-inferrable-types': ['error'],
        '@typescript-eslint/no-misused-promises': ['error'],
        '@typescript-eslint/no-shadow': ['error'],
        '@typescript-eslint/no-unnecessary-type-assertion': ['error'],
        '@typescript-eslint/no-unsafe-assignment': ['warn'],
        '@typescript-eslint/no-unsafe-call': ['warn'],
        '@typescript-eslint/no-unsafe-member-access': ['warn'],
        '@typescript-eslint/no-unsafe-return': ['error'],
        '@typescript-eslint/no-unused-vars': ['error'],
        '@typescript-eslint/no-var-requires': ['error'],
        '@typescript-eslint/require-await': ['error'],
        '@typescript-eslint/restrict-plus-operands': ['error'],
        '@typescript-eslint/restrict-template-expressions': ['off'],
        '@typescript-eslint/unbound-method': ['error'],
        '@typescript-eslint/no-for-in-array': ['error'],
        '@typescript-eslint/prefer-regexp-exec': ['error'],
        '@typescript-eslint/prefer-readonly': ['error'],
        'class-methods-use-this': ['off'],
        'consistent-return': ['error'],
        'dot-notation': ['error'],
        'max-len': ['off'],
        'no-empty': ['error'],
        'no-restricted-syntax': ['error'],
        'no-return-await': ['error'],
        'no-shadow': ['off'],
        'no-underscore-dangle': [0],
        'no-unreachable': ['error'],
        'no-useless-constructor': ['off'],
        '@typescript-eslint/no-useless-constructor': ['error'],
        'import/default': ['error'],
        'import/no-cycle': ['error'],
        'import/no-useless-path-segments': ['error'],
        'prettier/prettier': ['error'],

        //error prevention
        'array-callback-return': ['error', { checkForEach: true }],
        'no-await-in-loop': 'error',
        'no-constant-binary-expression': 'error',
        'no-constructor-return': 'error',
        'no-promise-executor-return': 'error',
        'no-self-compare': 'error',
        'no-template-curly-in-string': 'error',
        'no-unmodified-loop-condition': 'error',
        'no-unreachable-loop': 'error',
        'no-unused-private-class-members': 'error',
        'require-atomic-updates': 'error',

        // good practises
        camelcase: ['error', { ignoreImports: true, properties: 'never' }],
        eqeqeq: 'error',
        'new-cap': 'error',
        'no-array-constructor': 'error',
        'no-console': ['error', { allow: ['error'] }],
        'no-else-return': ['error', { allowElseIf: false }],
        'no-extend-native': 'error',
        'no-lonely-if': 'error',
        'no-param-reassign': 'error',
        'no-return-assign': 'error',
        'no-throw-literal': 'error',
        'no-var': 'error',
        'object-shorthand': 'error',
        'prefer-const': 'error',
        'prefer-rest-params': 'error',
        'prefer-spread': 'error',
        'prefer-template': 'error',
        radix: 'error',
        yoda: 'error',

        // plugins
        'import/first': 'error',
        'import/newline-after-import': 'error',
        'import/no-duplicates': 'error',
        'import/no-webpack-loader-syntax': 'error',
        'simple-import-sort/exports': 'error',
        'simple-import-sort/imports': 'error',
        'unused-imports/no-unused-imports': 'error',
        'unused-imports/no-unused-vars': [
            'warn',
            {
                vars: 'all',
                varsIgnorePattern: '^_',
                args: 'after-used',
                argsIgnorePattern: '^_',
            },
        ],
    },
    settings: {
        'import/resolver': {
            node: {
                extensions: ['.ts'],
            },
        },
    },
};
